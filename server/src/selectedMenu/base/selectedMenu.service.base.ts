/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, SelectedMenu, User } from "@prisma/client";

export class SelectedMenuServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SelectedMenuFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedMenuFindManyArgs>
  ): Promise<number> {
    return this.prisma.selectedMenu.count(args);
  }

  async findMany<T extends Prisma.SelectedMenuFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedMenuFindManyArgs>
  ): Promise<SelectedMenu[]> {
    return this.prisma.selectedMenu.findMany(args);
  }
  async findOne<T extends Prisma.SelectedMenuFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedMenuFindUniqueArgs>
  ): Promise<SelectedMenu | null> {
    return this.prisma.selectedMenu.findUnique(args);
  }
  async create<T extends Prisma.SelectedMenuCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedMenuCreateArgs>
  ): Promise<SelectedMenu> {
    return this.prisma.selectedMenu.create<T>(args);
  }
  async update<T extends Prisma.SelectedMenuUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedMenuUpdateArgs>
  ): Promise<SelectedMenu> {
    return this.prisma.selectedMenu.update<T>(args);
  }
  async delete<T extends Prisma.SelectedMenuDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedMenuDeleteArgs>
  ): Promise<SelectedMenu> {
    return this.prisma.selectedMenu.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.selectedMenu
      .findUnique({
        where: { id: parentId },
      })
      .users(args);
  }
}
